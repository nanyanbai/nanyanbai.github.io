<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux从入门到精通配套笔记</title>
    <url>/2019/10/14/linux%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习知识归纳</title>
    <url>/2019/10/12/git/</url>
    <content><![CDATA[<hr>
<blockquote>
<h1 id="盛年不重来，一日难再晨。及时当勉励，岁月不待人"><a href="#盛年不重来，一日难再晨。及时当勉励，岁月不待人" class="headerlink" title="盛年不重来，一日难再晨。及时当勉励，岁月不待人"></a>盛年不重来，一日难再晨。及时当勉励，岁月不待人</h1></blockquote>
<h2 id="Git三个区"><a href="#Git三个区" class="headerlink" title="Git三个区"></a>Git三个区</h2><ul>
<li>工作区：我们书写代码的地方，工作的目录就叫工作区</li>
<li>暂存区：暂时存储的区域，在git中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。 暂存区的目的就是避免误操作</li>
<li>本地仓库区：将保持在暂存区域的内容永久转储到Git仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本</li>
</ul>
<h2 id="Git命令操作"><a href="#Git命令操作" class="headerlink" title="Git命令操作"></a>Git命令操作</h2><ol>
<li><p>本地库初始化</p>
<ul>
<li><p>首先用cd的方式进入工作目录下</p>
</li>
<li><p>然后创建一个项目名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir  demoProject</span><br></pre></td></tr></table></figure>
</li>
<li><p>比如我们现在创建的demoProject是项目名称，要切换到项目根目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd demoProject</span><br></pre></td></tr></table></figure>
</li>
<li><p>对本地项目进行git的初始化, 把这个目录变成Git可以管理的仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  init</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何查看被隐藏的文件呢? 使用以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lA</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul>
<li>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库，可以在当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，对.git这个文件不能删除，也要胡乱修改。</li>
<li>如果没有看到.git这个目录， 不要慌张，那是因为这个目录默认是隐藏的</li>
</ul>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>设置签名</p>
<ul>
<li><p>形式<br>用户名： test<br>Email地址：<a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a></p>
</li>
<li><p>作用： 区分不同开发人员的身份</p>
</li>
<li><p>辨析：这里设置的签名和登录远程库（代码托管中心）的账号，密码没有任何关系</p>
</li>
<li><p>命令<br>项目级别/仓库级别：仅在当前本地库范围内有效<br>git config user.name  test_pro<br>git config user.email <a href="mailto:test_pro@gmail.com" target="_blank" rel="noopener">test_pro@gmail.com</a><br>信息保存位置：./git/config文件<br>查看命令：cat .git/config<br>系统用户级别： 登录当前操作系统的用户范围<br>git  config –global user.anme_glb<br>git config –global  user.email <a href="mailto:test_glb@gmail.com" target="_blank" rel="noopener">test_glb@gmail.com</a><br>级别优先级：<br>（1）就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名<br>（2）如果只有系统级别的签名，就以系统用户级别的签名为准<br>（3）二者都没有不允许</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>查看被隐藏的所有文件命令：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lA|less</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="想要让git对一个目录进行版本控制需要以下步骤："><a href="#想要让git对一个目录进行版本控制需要以下步骤：" class="headerlink" title="想要让git对一个目录进行版本控制需要以下步骤："></a>想要让git对一个目录进行版本控制需要以下步骤：</h2><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><ul>
<li><p>进入要管理的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 文件夹</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行初始化操作命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理目录下的文件状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">注：新增的文件和修改过后的文件都是红色</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理指定文件（红变绿）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  add  文件名</span><br><span class="line">git add .</span><br><span class="line">注：git  add .  是提交所有的文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>个人信息配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name   git_user</span><br><span class="line">git config user.email  git_user@qq.com</span><br><span class="line">注：只对本地库范围内有效</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  commit -m &apos;提交或者修改的描述信息&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  log</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><ul>
<li><p>回滚之前的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  log   (查看记录)</span><br><span class="line">git  reset  --hard  版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>回滚之之后的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog </span><br><span class="line">git reset  --hard  版本号</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><ul>
<li><p>查看分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  branch  分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  branch  -d  分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  checkout 分支名</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支合并（可能会产生冲突）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge  要合并的分支</span><br><span class="line">注：切换分支再合并, 是谁合并到谁，一定要注意</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><ul>
<li><p>给远程仓库起别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  remote  add orign  远程仓库地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>向远程推送代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  push -u origin  分支</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="第五阶段"><a href="#第五阶段" class="headerlink" title="第五阶段"></a>第五阶段</h3><ul>
<li><p>克隆远程仓库代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  clone  远程仓库地址</span><br><span class="line">注： 这个是把所有分支的代码都拉取下来了， 如果你想切换分支就使用命令： git  checkout 分支名</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  pull  origin  dev</span><br></pre></td></tr></table></figure>



































</li>
</ul>
<p>​    </p>
<p>​    </p>
<p>​     </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
